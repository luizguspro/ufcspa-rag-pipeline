"""
Script de setup completo para o sistema RAG UFCSPA.
Corrige todos os problemas e configura o ambiente.
"""

import os
import subprocess
import sys
from pathlib import Path
import json


class ProjectSetup:
    """Classe para configurar o projeto completo."""
    
    def __init__(self):
        self.base_dir = Path.cwd()
        self.errors = []
        self.warnings = []
    
    def print_header(self, text):
        """Imprime cabe√ßalho formatado."""
        print(f"\n{'='*70}")
        print(f"üîß {text}")
        print(f"{'='*70}")
    
    def check_python_version(self):
        """Verifica vers√£o do Python."""
        version = sys.version_info
        if version.major == 3 and version.minor >= 8:
            print(f"‚úÖ Python {version.major}.{version.minor} detectado")
            return True
        else:
            self.errors.append(f"Python 3.8+ necess√°rio (atual: {version.major}.{version.minor})")
            return False
    
    def create_directory_structure(self):
        """Cria estrutura completa de diret√≥rios."""
        directories = [
            "data/raw",
            "data/processed", 
            "faiss_index",
            "logs",
            "scraper",
            "ingest",
            "query",
            "tests"
        ]
        
        for dir_path in directories:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
        
        print("‚úÖ Estrutura de diret√≥rios criada")
    
    def install_dependencies(self):
        """Instala depend√™ncias necess√°rias."""
        print("\nüì¶ Instalando depend√™ncias...")
        
        # Lista de pacotes essenciais
        packages = [
            "scrapy==2.11.2",
            "requests",
            "beautifulsoup4",
            "pdfminer.six",
            "pytesseract",
            "pdf2image",
            "Pillow",
            "sentence-transformers",
            "faiss-cpu",
            "langchain",
            "tiktoken",
            "tqdm",
            "numpy",
            "pandas"
        ]
        
        for package in packages:
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", package], 
                                    stdout=subprocess.DEVNULL)
                print(f"  ‚úÖ {package}")
            except:
                self.warnings.append(f"Falha ao instalar {package}")
                print(f"  ‚ö†Ô∏è  {package} - falhou")
    
    def create_sample_data(self):
        """Cria dados de exemplo para teste."""
        output_dir = Path("data/processed")
        
        samples = {
            "estatuto_ufcspa.txt": """ESTATUTO DA UNIVERSIDADE FEDERAL DE CI√äNCIAS DA SA√öDE DE PORTO ALEGRE

CAP√çTULO I - DA UNIVERSIDADE E SEUS FINS

Art. 1¬∫ A Universidade Federal de Ci√™ncias da Sa√∫de de Porto Alegre - UFCSPA, criada pela Lei n¬∫ 11.641, de 13 de janeiro de 2008, √© uma funda√ß√£o p√∫blica, dotada de personalidade jur√≠dica de direito p√∫blico, com autonomia did√°tico-cient√≠fica, administrativa e de gest√£o financeira e patrimonial.

Art. 2¬∫ A UFCSPA tem sede e foro na cidade de Porto Alegre, Estado do Rio Grande do Sul.

Art. 3¬∫ A UFCSPA tem por finalidade promover o ensino, a pesquisa e a extens√£o, com √™nfase na √°rea da sa√∫de.

CAP√çTULO II - DOS PRINC√çPIOS

Art. 4¬∫ A UFCSPA, no cumprimento de sua miss√£o, orienta-se pelos seguintes princ√≠pios:
I - indissociabilidade entre ensino, pesquisa e extens√£o;
II - universalidade do conhecimento e educa√ß√£o;
III - interdisciplinaridade do conhecimento;
IV - excel√™ncia acad√™mica;
V - democratiza√ß√£o do acesso e perman√™ncia;
VI - gest√£o democr√°tica e colegiada;
VII - valoriza√ß√£o dos profissionais da educa√ß√£o;
VIII - compromisso social e √©tico.""",

            "normas_extensao.txt": """RESOLU√á√ÉO N¬∫ 001/2023 - CONSEPE

Estabelece as normas para as atividades de extens√£o universit√°ria no √¢mbito da UFCSPA.

Art. 1¬∫ As atividades de extens√£o universit√°ria s√£o processos interdisciplinares, educativos, culturais, cient√≠ficos e pol√≠ticos que promovem a intera√ß√£o transformadora entre a Universidade e outros setores da sociedade.

Art. 2¬∫ S√£o consideradas atividades de extens√£o:
I - programas: conjunto articulado de projetos e outras a√ß√µes de extens√£o;
II - projetos: a√ß√µes processuais e cont√≠nuas de car√°ter educativo, social, cultural, cient√≠fico ou tecnol√≥gico;
III - cursos e oficinas: a√ß√µes pedag√≥gicas de car√°ter te√≥rico e/ou pr√°tico;
IV - eventos: a√ß√µes que implicam na apresenta√ß√£o e/ou exibi√ß√£o p√∫blica;
V - presta√ß√£o de servi√ßos: realiza√ß√£o de trabalho oferecido pela UFCSPA.

Art. 3¬∫ Todas as atividades de extens√£o devem ser registradas e aprovadas pela Pr√≥-Reitoria de Extens√£o.""",

            "regimento_interno.txt": """REGIMENTO INTERNO DA UFCSPA

T√çTULO I - DAS DISPOSI√á√ïES PRELIMINARES

Art. 1¬∫ O presente Regimento Interno disciplina a organiza√ß√£o e o funcionamento da Universidade Federal de Ci√™ncias da Sa√∫de de Porto Alegre - UFCSPA.

T√çTULO II - DA ESTRUTURA ORGANIZACIONAL

Art. 2¬∫ A administra√ß√£o superior da UFCSPA √© exercida pelos seguintes √≥rg√£os:
I - Conselho Universit√°rio (CONSUN);
II - Conselho de Ensino, Pesquisa e Extens√£o (CONSEPE);
III - Reitoria.

Art. 3¬∫ O Conselho Universit√°rio √© o √≥rg√£o m√°ximo deliberativo e normativo da Universidade."""
        }
        
        for filename, content in samples.items():
            filepath = output_dir / filename
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
        
        print(f"‚úÖ Criados {len(samples)} arquivos de exemplo")
    
    def fix_file_paths(self):
        """Corrige problemas de paths nos scripts."""
        # Cria __init__.py em todos os m√≥dulos
        for module in ["scraper", "ingest", "query"]:
            init_file = Path(module) / "__init__.py"
            if not init_file.exists():
                init_file.write_text("")
        
        print("‚úÖ Arquivos __init__.py criados")
    
    def create_config_file(self):
        """Cria arquivo de configura√ß√£o central."""
        config = {
            "project_name": "UFCSPA RAG System",
            "version": "1.0.0",
            "paths": {
                "data_raw": "data/raw",
                "data_processed": "data/processed",
                "faiss_index": "faiss_index",
                "logs": "logs"
            },
            "models": {
                "embedding_model": "sentence-transformers/all-MiniLM-L6-v2",
                "embedding_dim": 384
            },
            "chunking": {
                "method": "langchain",
                "chunk_size": 1000,
                "chunk_overlap": 200
            }
        }
        
        with open("config.json", "w") as f:
            json.dump(config, f, indent=2)
        
        print("‚úÖ Arquivo de configura√ß√£o criado")
    
    def run_pipeline_test(self):
        """Testa o pipeline b√°sico."""
        print("\nüß™ Testando pipeline...")
        
        # Testa chunking
        try:
            result = subprocess.run(
                [sys.executable, "ingest/chunk.py"],
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                print("  ‚úÖ Chunking funcionando")
            else:
                print("  ‚ö†Ô∏è  Erro no chunking")
                self.warnings.append("Chunking com problemas")
        except:
            print("  ‚ùå Chunking falhou")
            self.errors.append("Chunking n√£o funciona")
    
    def create_run_script(self):
        """Cria script para executar o sistema completo."""
        run_script = '''#!/usr/bin/env python
"""
Script para executar o sistema RAG UFCSPA completo.
"""

import subprocess
import sys
from pathlib import Path

def run_step(command, description):
    print(f"\\n{'='*60}")
    print(f"Executando: {description}")
    print(f"{'='*60}")
    
    result = subprocess.run(command, shell=True)
    return result.returncode == 0

def main():
    steps = [
        ("python scraper/download_with_ssl_fix.py", "Download de PDFs"),
        ("python ingest/convert.py", "Convers√£o PDF ‚Üí Texto"),
        ("python ingest/chunk.py", "Divis√£o em chunks"),
        ("python ingest/embed.py", "Gera√ß√£o de embeddings"),
        ("python query/interactive.py", "Interface de consulta")
    ]
    
    print("SISTEMA RAG UFCSPA - EXECU√á√ÉO COMPLETA")
    
    for command, description in steps[:-1]:
        if not run_step(command, description):
            print(f"\\n‚ùå Erro em: {description}")
            print("Verifique os logs e tente novamente")
            return
    
    # √öltima etapa - interface
    print("\\n‚úÖ Pipeline conclu√≠do! Iniciando interface...")
    run_step(steps[-1][0], steps[-1][1])

if __name__ == "__main__":
    main()
'''
        
        with open("run_system.py", "w") as f:
            f.write(run_script)
        
        print("‚úÖ Script run_system.py criado")
    
    def print_summary(self):
        """Imprime resumo da configura√ß√£o."""
        print("\n" + "="*70)
        print("üìä RESUMO DA CONFIGURA√á√ÉO")
        print("="*70)
        
        if self.errors:
            print("\n‚ùå ERROS ENCONTRADOS:")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        
        if self.warnings:
            print("\n‚ö†Ô∏è  AVISOS:")
            for warning in self.warnings:
                print(f"  ‚Ä¢ {warning}")
        
        if not self.errors:
            print("\n‚úÖ SISTEMA CONFIGURADO COM SUCESSO!")
            print("\nüöÄ Para usar o sistema:")
            print("  1. Teste com dados de exemplo:")
            print("     python rag_demo.py")
            print("\n  2. Execute o pipeline completo:")
            print("     python run_system.py")
            print("\n  3. Use apenas a interface:")
            print("     python query/interactive.py")


def main():
    """Executa o setup completo."""
    print("SETUP COMPLETO - SISTEMA RAG UFCSPA")
    print("="*70)
    
    setup = ProjectSetup()
    
    # Executa todas as etapas
    setup.print_header("Verificando Python")
    setup.check_python_version()
    
    setup.print_header("Criando estrutura de diret√≥rios")
    setup.create_directory_structure()
    
    setup.print_header("Instalando depend√™ncias")
    setup.install_dependencies()
    
    setup.print_header("Criando dados de exemplo")
    setup.create_sample_data()
    
    setup.print_header("Corrigindo arquivos")
    setup.fix_file_paths()
    
    setup.print_header("Criando configura√ß√µes")
    setup.create_config_file()
    setup.create_run_script()
    
    setup.print_header("Testando sistema")
    setup.run_pipeline_test()
    
    # Resumo final
    setup.print_summary()


if __name__ == "__main__":
    main()