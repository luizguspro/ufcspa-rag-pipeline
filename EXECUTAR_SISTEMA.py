"""
SCRIPT PRINCIPAL - SISTEMA RAG UFCSPA
Execute este arquivo para usar o sistema!
"""

import os
import sys
import subprocess
from pathlib import Path


def clear_screen():
    """Limpa a tela."""
    os.system('cls' if os.name == 'nt' else 'clear')


def print_banner():
    """Mostra banner do sistema."""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë              SISTEMA RAG - NORMAS UFCSPA                   ‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïë  Recupera√ß√£o e Gera√ß√£o Aumentada de Informa√ß√µes           ‚ïë
    ‚ïë  Universidade Federal de Ci√™ncias da Sa√∫de de Porto Alegre‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


def check_and_run():
    """Verifica o ambiente e executa o sistema apropriado."""
    
    print("\nüîç Verificando sistema...\n")
    
    # Verifica Llama
    llama_status = "‚ùå N√£o instalado"
    try:
        from query.llama_model import get_llama_model
        llama = get_llama_model()
        info = llama.get_model_info()
        if info['status'] == 'ready':
            llama_status = f"‚úÖ Pronto ({info['model_name']})"
        elif info['status'] == 'not_found':
            llama_status = "‚ö†Ô∏è  Sem modelo (baixe com download_llama_model.py)"
        else:
            llama_status = f"‚ö†Ô∏è  {info['status']}"
    except:
        pass
    
    print(f"ü¶ô Llama: {llama_status}")
    
    # Verifica se os arquivos principais existem
    files_to_check = {
        "rag_demo.py": "Demo simplificada (sempre funciona)",
        "run_all.py": "Pipeline completo",
        "run_with_llama.py": "Sistema com Llama integrado",
        "query/interactive.py": "Interface interativa",
        "setup_complete.py": "Setup autom√°tico"
    }
    
    available_options = []
    
    for file, description in files_to_check.items():
        if Path(file).exists():
            available_options.append((file, description))
            print(f"‚úÖ {description}: {file}")
        else:
            print(f"‚ùå {description}: {file} (n√£o encontrado)")
    
    if not available_options:
        print("\n‚ùå Nenhum arquivo do sistema encontrado!")
        print("\nüìù Criando sistema m√≠nimo...")
        create_minimal_system()
        return
    
    # Menu de op√ß√µes
    print("\n" + "="*60)
    print("OP√á√ïES DISPON√çVEIS:")
    print("="*60)
    
    print("\n1. üöÄ Demo R√°pida (Recomendado para primeira vez)")
    print("2. ü¶ô Sistema com Llama (IA local)")
    print("3. üîß Setup Completo + Execu√ß√£o")
    print("4. üìä Pipeline Completo (se j√° configurado)")
    print("5. üí¨ Interface Interativa (se dispon√≠vel)")
    print("6. ‚ùå Sair")
    
    while True:
        choice = input("\nEscolha uma op√ß√£o (1-6): ").strip()
        
        if choice == "1":
            # Tenta executar demo
            if Path("rag_demo.py").exists():
                print("\nüöÄ Iniciando demo...")
                subprocess.run([sys.executable, "rag_demo.py"])
            else:
                print("\nüìù Criando e executando demo...")
                create_minimal_system()
            break
            
        elif choice == "2":
            # Sistema com Llama
            if Path("run_with_llama.py").exists():
                print("\nü¶ô Iniciando sistema com Llama...")
                subprocess.run([sys.executable, "run_with_llama.py"])
            else:
                print("\n‚ùå Script do Llama n√£o encontrado")
            break
            
        elif choice == "3":
            # Setup completo
            if Path("setup_complete.py").exists():
                print("\nüîß Executando setup completo...")
                subprocess.run([sys.executable, "setup_complete.py"])
                print("\n‚úÖ Setup conclu√≠do! Executando sistema...")
                if Path("run_all.py").exists():
                    subprocess.run([sys.executable, "run_all.py"])
            else:
                print("\n‚ùå Arquivo de setup n√£o encontrado")
            break
            
        elif choice == "4":
            # Pipeline completo
            if Path("run_all.py").exists():
                print("\nüìä Executando pipeline completo...")
                subprocess.run([sys.executable, "run_all.py"])
            else:
                print("\n‚ùå Pipeline n√£o encontrado")
            break
            
        elif choice == "5":
            # Interface interativa
            if Path("query/interactive.py").exists():
                print("\nüí¨ Iniciando interface interativa...")
                subprocess.run([sys.executable, "query/interactive.py"])
            else:
                print("\n‚ùå Interface n√£o encontrada")
            break
            
        elif choice == "6":
            print("\nüëã At√© logo!")
            break
            
        else:
            print("‚ùå Op√ß√£o inv√°lida! Escolha entre 1-6")


def create_minimal_system():
    """Cria um sistema m√≠nimo funcional."""
    
    minimal_code = '''
import re

print("\\n" + "="*60)
print("SISTEMA RAG MINIMO - UFCSPA")
print("="*60)

# Dados de exemplo
docs = [
    {
        "titulo": "Estatuto UFCSPA",
        "conteudo": "A UFCSPA tem como princ√≠pios: excel√™ncia acad√™mica, forma√ß√£o human√≠stica, compromisso social, gest√£o democr√°tica e autonomia universit√°ria."
    },
    {
        "titulo": "Normas de Extens√£o",
        "conteudo": "As atividades de extens√£o incluem: programas, projetos, cursos, eventos e presta√ß√£o de servi√ßos. Devem ter relev√¢ncia social e participa√ß√£o estudantil."
    },
    {
        "titulo": "Regimento Interno",
        "conteudo": "A administra√ß√£o √© exercida pelo Conselho Universit√°rio (CONSUN), CONSEPE e Reitoria. O Reitor √© a autoridade executiva m√°xima."
    }
]

print("\\n‚úÖ Sistema carregado com 3 documentos de exemplo")
print("\\nüí° Digite 'sair' para encerrar")

while True:
    pergunta = input("\\n‚ùì Sua pergunta: ").strip()
    
    if pergunta.lower() in ['sair', 'exit']:
        print("\\nüëã At√© logo!")
        break
    
    if not pergunta:
        continue
    
    # Busca simples
    palavras = re.findall(r'\\w+', pergunta.lower())
    resultados = []
    
    for doc in docs:
        score = sum(1 for p in palavras if p in doc["conteudo"].lower())
        if score > 0:
            resultados.append((doc, score))
    
    if resultados:
        resultados.sort(key=lambda x: x[1], reverse=True)
        print(f"\\nüìÑ Encontrei {len(resultados)} documento(s) relevante(s):")
        for doc, score in resultados:
            print(f"\\n‚Ä¢ {doc['titulo']} (relev√¢ncia: {score})")
            print(f"  {doc['conteudo'][:100]}...")
    else:
        print("\\n‚ùå Nenhum documento relevante encontrado")
'''
    
    # Salva o c√≥digo m√≠nimo
    with open("sistema_minimo.py", "w", encoding="utf-8") as f:
        f.write(minimal_code)
    
    print("‚úÖ Sistema m√≠nimo criado!")
    
    # Executa
    subprocess.run([sys.executable, "sistema_minimo.py"])


def main():
    """Fun√ß√£o principal."""
    try:
        clear_screen()
        print_banner()
        check_and_run()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Execu√ß√£o interrompida")
    except Exception as e:
        print(f"\n\n‚ùå Erro: {e}")
        print("\nüí° Tente executar diretamente:")
        print("   python rag_demo.py")
        print("   python run_all.py")


if __name__ == "__main__":
    main()