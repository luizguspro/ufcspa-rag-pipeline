"""
Script mestre para executar o sistema RAG UFCSPA completo.
Executa todas as etapas com tratamento de erros.
"""

import os
import sys
import subprocess
from pathlib import Path
import time


class RAGPipeline:
    """Gerenciador do pipeline RAG completo."""
    
    def __init__(self):
        self.base_dir = Path.cwd()
        self.steps_completed = []
        self.errors = []
    
    def print_header(self, text, emoji="üîß"):
        """Imprime cabe√ßalho formatado."""
        print(f"\n{'='*70}")
        print(f"{emoji} {text}")
        print(f"{'='*70}")
    
    def run_command(self, command, description, required=True):
        """Executa um comando e retorna sucesso/falha."""
        print(f"\n‚è≥ {description}...")
        
        try:
            # Executa o comando
            if isinstance(command, str):
                result = subprocess.run(
                    command,
                    shell=True,
                    capture_output=True,
                    text=True
                )
            else:
                result = subprocess.run(
                    command,
                    capture_output=True,
                    text=True
                )
            
            if result.returncode == 0:
                print(f"‚úÖ {description} - Conclu√≠do!")
                self.steps_completed.append(description)
                return True
            else:
                error_msg = f"{description} falhou"
                print(f"‚ùå {error_msg}")
                if result.stderr:
                    print(f"   Erro: {result.stderr[:200]}...")
                
                if required:
                    self.errors.append(error_msg)
                return False
                
        except Exception as e:
            error_msg = f"{description} - Exce√ß√£o: {str(e)}"
            print(f"‚ùå {error_msg}")
            if required:
                self.errors.append(error_msg)
            return False
    
    def check_environment(self):
        """Verifica o ambiente."""
        self.print_header("Verificando Ambiente", "üîç")
        
        # Python
        print(f"Python: {sys.version}")
        
        # Diret√≥rios
        dirs_needed = ["data/raw", "data/processed", "faiss_index"]
        for dir_path in dirs_needed:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
        print("‚úÖ Diret√≥rios criados/verificados")
        
        # Depend√™ncias cr√≠ticas
        critical_packages = ["scrapy", "requests", "beautifulsoup4"]
        missing = []
        
        for package in critical_packages:
            try:
                __import__(package)
            except ImportError:
                missing.append(package)
        
        if missing:
            print(f"\n‚ö†Ô∏è  Pacotes faltando: {', '.join(missing)}")
            print("Instalando...")
            self.run_command(
                f"{sys.executable} -m pip install {' '.join(missing)}",
                "Instala√ß√£o de depend√™ncias"
            )
    
    def create_sample_data(self):
        """Cria dados de exemplo."""
        self.print_header("Criando Dados de Exemplo", "üìù")
        
        output_dir = Path("data/processed")
        
        samples = {
            "estatuto_ufcspa.txt": """ESTATUTO DA UNIVERSIDADE FEDERAL DE CI√äNCIAS DA SA√öDE DE PORTO ALEGRE

CAP√çTULO I - DA UNIVERSIDADE E SEUS FINS

Art. 1¬∫ A UFCSPA √© uma funda√ß√£o p√∫blica federal de ensino superior, com autonomia did√°tico-cient√≠fica, administrativa e de gest√£o financeira e patrimonial.

Art. 2¬∫ A UFCSPA tem por finalidade promover o ensino, a pesquisa e a extens√£o, com √™nfase na √°rea da sa√∫de.

CAP√çTULO II - DOS PRINC√çPIOS

Art. 3¬∫ S√£o princ√≠pios da UFCSPA:
I - Excel√™ncia acad√™mica
II - Forma√ß√£o human√≠stica
III - Compromisso social
IV - Gest√£o democr√°tica
V - Autonomia universit√°ria""",

            "normas_extensao.txt": """NORMAS PARA ATIVIDADES DE EXTENS√ÉO

Art. 1¬∫ As atividades de extens√£o promovem a intera√ß√£o entre universidade e sociedade.

Art. 2¬∫ Modalidades:
I - Programas
II - Projetos  
III - Cursos
IV - Eventos
V - Presta√ß√£o de servi√ßos

Art. 3¬∫ Requisitos:
I - Relev√¢ncia social
II - Articula√ß√£o com ensino/pesquisa
III - Participa√ß√£o estudantil""",

            "regimento_interno.txt": """REGIMENTO INTERNO DA UFCSPA

Art. 1¬∫ A administra√ß√£o superior √© exercida por:
I - Conselho Universit√°rio (CONSUN)
II - Conselho de Ensino, Pesquisa e Extens√£o (CONSEPE)
III - Reitoria

Art. 2¬∫ O Reitor √© a autoridade executiva m√°xima."""
        }
        
        created = 0
        for filename, content in samples.items():
            filepath = output_dir / filename
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            created += 1
        
        print(f"‚úÖ {created} arquivos de exemplo criados")
        return created > 0
    
    def run_pipeline(self):
        """Executa o pipeline completo."""
        self.print_header("PIPELINE RAG UFCSPA", "üöÄ")
        
        # 1. Verifica ambiente
        self.check_environment()
        
        # 2. Tenta baixar PDFs ou cria dados de exemplo
        self.print_header("Obten√ß√£o de Dados", "üì•")
        
        # Verifica se j√° tem dados
        existing_pdfs = list(Path("data/raw").glob("*.pdf"))
        existing_txts = list(Path("data/processed").glob("*.txt"))
        
        if existing_pdfs:
            print(f"‚úÖ {len(existing_pdfs)} PDFs j√° existentes")
        elif existing_txts:
            print(f"‚úÖ {len(existing_txts)} textos j√° existentes")
        else:
            print("üìÑ Criando dados de exemplo...")
            self.create_sample_data()
        
        # 3. Chunking
        self.print_header("Processamento de Texto", "‚úÇÔ∏è")
        self.run_command(
            [sys.executable, "ingest/chunk.py"],
            "Divis√£o em chunks"
        )
        
        # 4. Embeddings (opcional)
        self.print_header("Gera√ß√£o de Embeddings", "üßÆ")
        
        # Verifica se as bibliotecas est√£o instaladas
        try:
            import sentence_transformers
            import faiss
            
            self.run_command(
                [sys.executable, "ingest/embed.py"],
                "Cria√ß√£o de √≠ndice vetorial",
                required=False
            )
        except ImportError:
            print("‚ö†Ô∏è  Bibliotecas de embeddings n√£o instaladas")
            print("   O sistema funcionar√° sem busca vetorial")
            print("   Para instalar: pip install sentence-transformers faiss-cpu")
        
        # 5. Resumo
        self.print_summary()
    
    def print_summary(self):
        """Imprime resumo da execu√ß√£o."""
        self.print_header("RESUMO DA EXECU√á√ÉO", "üìä")
        
        print("\n‚úÖ ETAPAS CONCLU√çDAS:")
        for step in self.steps_completed:
            print(f"   ‚Ä¢ {step}")
        
        if self.errors:
            print("\n‚ùå ERROS ENCONTRADOS:")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
        
        # Verifica arquivos criados
        chunks_file = Path("data/processed/chunks.json")
        if chunks_file.exists():
            print(f"\n‚úÖ Sistema pronto para uso!")
            print("\nüöÄ COMO USAR:")
            print("\n1. Sistema simplificado (sempre funciona):")
            print("   python rag_demo.py")
            
            if Path("faiss_index/ufcspa.index").exists():
                print("\n2. Sistema completo com embeddings:")
                print("   python query/interactive.py")
            
            print("\n3. Consulta r√°pida:")
            print('   python query/query.py "Sua pergunta aqui"')
        else:
            print("\n‚ö†Ô∏è  Sistema parcialmente configurado")
            print("Use: python rag_demo.py (vers√£o simplificada)")


def main():
    """Fun√ß√£o principal."""
    pipeline = RAGPipeline()
    
    try:
        pipeline.run_pipeline()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()